/* eslint-disable @typescript-eslint/no-explicit-any */
/** Declaration file generated by dts-gen */
export const listeners: any;

export function getDefaultOptions(): any;

export function listen(httpApp: any, socketServer: any, options: any, listenCallback: Function): void;

export function on(event: string, listener: Function): void;

export function removeAllListeners(event?: string): void;

export function setOption(optionName: any, optionValue: any): boolean;

export namespace events
{
    function emit(p0: any): any;

    function emitDefault(...args: any[]): void;

    function on (eventName: string, listener: Function): void;

    function removeAllListeners(eventName: string): void;

    function setDefaultListener(eventName: string): void;

    function setDefaultListeners(): void;

    namespace defaultListeners
    {
        function authenticate(socket: any, easyrtcid: any, appName: any, username: any, credential: any, easyrtcAuthMessage: any, next: any): void;

        function authenticated(connectionObj: any, next: any): void;

        function connection(socket: any, easyrtcid: any, next: any): void;

        function disconnect(connectionObj: any, next: any): void;

        function easyrtcAuth(socket: any, easyrtcid: any, msg: any, socketCallback: any, callback: any): void;

        function easyrtcCmd(connectionObj: any, msg: any, socketCallback: any, next: any): void;

        function easyrtcMsg(connectionObj: any, msg: any, socketCallback: any, next: any): void;

        function emitEasyrtcCmd(connectionObj: any, msgType: any, msg: any, socketCallback: any, next: any): void;

        function emitEasyrtcMsg(connectionObj: any, msgType: any, msg: any, socketCallback: any, next: any): void;

        function emitError(connectionObj: any, errorCode: any, socketCallback: any, next: any): void;

        function emitReturnAck(connectionObj: any, socketCallback: any, next: any): void;

        function emitReturnError(connectionObj: any, socketCallback: any, errorCode: any, next: any): void;

        function emitReturnToken(connectionObj: any, socketCallback: any, next: any): void;

        function getIceConfig(connectionObj: any, callback: any): void;

        function log(level: any, logText: any, logFields: any, next: any): void;

        function msgTypeGetIceConfig(connectionObj: any, socketCallback: any, next: any): void;

        function msgTypeGetRoomList(connectionObj: any, socketCallback: any, next: any): void;

        function msgTypeRoomJoin(connectionObj: any, rooms: any, socketCallback: any, next: any): void;

        function msgTypeRoomLeave(connectionObj: any, rooms: any, socketCallback: any, next: any): void;

        function msgTypeSetPresence(connectionObj: any, presenceObj: any, socketCallback: any, next: any): void;

        function msgTypeSetRoomApiField(connectionObj: any, roomApiFieldObj: any, socketCallback: any, next: any): void;

        function roomCreate(appObj: any, creatorConnectionObj: any, roomName: any, roomOptions: any, callback: any): void;

        function roomJoin(connectionObj: any, roomName: any, roomParameter: any, callback: any): void;

        function roomLeave(connectionObj: any, roomName: any, next: any): void;

        function shutdown(next: any): void;

        function startup(next: any): void;

    }

}

export namespace util
{
    class ApplicationError
    {
        constructor(msg: any);

    }

    class ApplicationWarning
    {
        constructor(msg: any);

    }

    class ConnectionError
    {
        constructor(msg: any);

    }

    class ConnectionWarning
    {
        constructor(msg: any);

    }

    class ServerError
    {
        constructor(msg: any);

    }

    class ServerWarning
    {
        constructor(msg: any);

    }

    function deepCopy(input: any): any;

    function getAvailableEasyrtcid(): any;

    function getErrorMsg(errorCode: any): any;

    function getErrorText(errorCode: any): any;

    function isError(err: any): any;

    function isValidIncomingMessage(type: any, msg: any, appObj: any, callback: any): void;

    function isWarning(err: any): any;

    function log(level: any, logText: string, logFields: any): void;

    function logDebug(logText: string, logFields: any): void;

    function logError(logText: string, logFields?: any): void;

    function logInfo(logText: string, logFields: any): void;

    function logWarning(logText: string, logFields: any): void;

    function nextToNowhere(err: any): void;

    function sendSessionCookie(req: any, res: any): void;

    function sendSocketCallbackAck(easyrtcid: any, socketCallback: any, appObj: any): any;

    function sendSocketCallbackMsg(easyrtcid: any, socketCallback: any, msg: any, appObj: any): any;

    function updateCheck(): void;

}